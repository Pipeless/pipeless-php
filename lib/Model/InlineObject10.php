<?php
/**
 * InlineObject10
 *
 * PHP version 5
 *
 * @category Class
 * @package  Pipeless
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Pipeless
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Pipeless\Model;

use \ArrayAccess;
use \Pipeless\ObjectSerializer;

/**
 * InlineObject10 Class Doc Comment
 *
 * @category Class
 * @package  Pipeless
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class InlineObject10 implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object_10';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'object' => '\Pipeless\Model\ObjectLookup',
        'content_object_type' => 'string',
        'primary_positive_relationship_type' => 'string',
        'secondary_positive_relationship_type' => 'string',
        'primary_negative_relationship_type' => 'string',
        'content_tagged_relationship_type' => 'string',
        'content_tag_object_type' => 'string',
        'coldstart_tag_ids' => 'string[]',
        'limit' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'object' => null,
        'content_object_type' => null,
        'primary_positive_relationship_type' => null,
        'secondary_positive_relationship_type' => null,
        'primary_negative_relationship_type' => null,
        'content_tagged_relationship_type' => null,
        'content_tag_object_type' => null,
        'coldstart_tag_ids' => null,
        'limit' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'object' => 'object',
        'content_object_type' => 'content_object_type',
        'primary_positive_relationship_type' => 'primary_positive_relationship_type',
        'secondary_positive_relationship_type' => 'secondary_positive_relationship_type',
        'primary_negative_relationship_type' => 'primary_negative_relationship_type',
        'content_tagged_relationship_type' => 'content_tagged_relationship_type',
        'content_tag_object_type' => 'content_tag_object_type',
        'coldstart_tag_ids' => 'coldstart_tag_ids',
        'limit' => 'limit'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'object' => 'setObject',
        'content_object_type' => 'setContentObjectType',
        'primary_positive_relationship_type' => 'setPrimaryPositiveRelationshipType',
        'secondary_positive_relationship_type' => 'setSecondaryPositiveRelationshipType',
        'primary_negative_relationship_type' => 'setPrimaryNegativeRelationshipType',
        'content_tagged_relationship_type' => 'setContentTaggedRelationshipType',
        'content_tag_object_type' => 'setContentTagObjectType',
        'coldstart_tag_ids' => 'setColdstartTagIds',
        'limit' => 'setLimit'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'object' => 'getObject',
        'content_object_type' => 'getContentObjectType',
        'primary_positive_relationship_type' => 'getPrimaryPositiveRelationshipType',
        'secondary_positive_relationship_type' => 'getSecondaryPositiveRelationshipType',
        'primary_negative_relationship_type' => 'getPrimaryNegativeRelationshipType',
        'content_tagged_relationship_type' => 'getContentTaggedRelationshipType',
        'content_tag_object_type' => 'getContentTagObjectType',
        'coldstart_tag_ids' => 'getColdstartTagIds',
        'limit' => 'getLimit'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const CONTENT_OBJECT_TYPE_USER = 'user';
    const CONTENT_OBJECT_TYPE_PRODUCT = 'product';
    const CONTENT_OBJECT_TYPE_IMAGE = 'image';
    const CONTENT_OBJECT_TYPE_COMMENT = 'comment';
    const CONTENT_OBJECT_TYPE_ARTICLE = 'article';
    const CONTENT_OBJECT_TYPE_POST = 'post';
    const CONTENT_OBJECT_TYPE_VIDEO = 'video';
    const CONTENT_OBJECT_TYPE_CONTENT = 'content';
    const CONTENT_OBJECT_TYPE_TAG = 'tag';
    const CONTENT_OBJECT_TYPE_CATEGORY = 'category';
    const CONTENT_OBJECT_TYPE_APP = 'app';
    const CONTENT_OBJECT_TYPE_BOOK = 'book';
    const CONTENT_OBJECT_TYPE_PERSON = 'person';
    const CONTENT_OBJECT_TYPE_SKILL = 'skill';
    const CONTENT_OBJECT_TYPE_JOB = 'job';
    const CONTENT_OBJECT_TYPE_COMPANY = 'company';
    const CONTENT_OBJECT_TYPE_ACCOUNT = 'account';
    const CONTENT_OBJECT_TYPE_CARD = 'card';
    const CONTENT_OBJECT_TYPE_COUNTRY = 'country';
    const CONTENT_OBJECT_TYPE_STATE = 'state';
    const CONTENT_OBJECT_TYPE_FILM = 'film';
    const CONTENT_OBJECT_TYPE_CART = 'cart';
    const PRIMARY_POSITIVE_RELATIONSHIP_TYPE_POSTED = 'posted';
    const PRIMARY_POSITIVE_RELATIONSHIP_TYPE_FOLLOWED = 'followed';
    const PRIMARY_POSITIVE_RELATIONSHIP_TYPE_LIKED = 'liked';
    const PRIMARY_POSITIVE_RELATIONSHIP_TYPE_FAVORITED = 'favorited';
    const PRIMARY_POSITIVE_RELATIONSHIP_TYPE_SAVED = 'saved';
    const PRIMARY_POSITIVE_RELATIONSHIP_TYPE_DISLIKED = 'disliked';
    const PRIMARY_POSITIVE_RELATIONSHIP_TYPE_PURCHASED = 'purchased';
    const PRIMARY_POSITIVE_RELATIONSHIP_TYPE_COMMENTED_ON = 'commentedOn';
    const PRIMARY_POSITIVE_RELATIONSHIP_TYPE_CREATED = 'created';
    const PRIMARY_POSITIVE_RELATIONSHIP_TYPE_VIEWED = 'viewed';
    const PRIMARY_POSITIVE_RELATIONSHIP_TYPE_REPORTED = 'reported';
    const PRIMARY_POSITIVE_RELATIONSHIP_TYPE_BLOCKED = 'blocked';
    const PRIMARY_POSITIVE_RELATIONSHIP_TYPE_DELETED = 'deleted';
    const PRIMARY_POSITIVE_RELATIONSHIP_TYPE_AUTHORED = 'authored';
    const PRIMARY_POSITIVE_RELATIONSHIP_TYPE_USED = 'used';
    const PRIMARY_POSITIVE_RELATIONSHIP_TYPE_DISMISSED = 'dismissed';
    const PRIMARY_POSITIVE_RELATIONSHIP_TYPE_LOGGED_IN = 'loggedIn';
    const PRIMARY_POSITIVE_RELATIONSHIP_TYPE_TAGGED_WITH = 'taggedWith';
    const PRIMARY_POSITIVE_RELATIONSHIP_TYPE_CATEGORIZED_IN = 'categorizedIn';
    const PRIMARY_POSITIVE_RELATIONSHIP_TYPE_INTERESTED_IN = 'interestedIn';
    const PRIMARY_POSITIVE_RELATIONSHIP_TYPE_LOCATED_IN = 'locatedIn';
    const PRIMARY_POSITIVE_RELATIONSHIP_TYPE_READ_QUARTER = 'readQuarter';
    const PRIMARY_POSITIVE_RELATIONSHIP_TYPE_READ_HALF = 'readHalf';
    const PRIMARY_POSITIVE_RELATIONSHIP_TYPE_READ_ALL = 'readAll';
    const PRIMARY_POSITIVE_RELATIONSHIP_TYPE_SUBSCRIBED_TO = 'subscribedTo';
    const PRIMARY_POSITIVE_RELATIONSHIP_TYPE_SUBSCRIBED_FROM = 'subscribedFrom';
    const PRIMARY_POSITIVE_RELATIONSHIP_TYPE_ADDED_TO = 'addedTo';
    const PRIMARY_POSITIVE_RELATIONSHIP_TYPE_MADE_BY = 'madeBy';
    const PRIMARY_POSITIVE_RELATIONSHIP_TYPE_PAUSED_ON = 'pausedOn';
    const SECONDARY_POSITIVE_RELATIONSHIP_TYPE_POSTED = 'posted';
    const SECONDARY_POSITIVE_RELATIONSHIP_TYPE_FOLLOWED = 'followed';
    const SECONDARY_POSITIVE_RELATIONSHIP_TYPE_LIKED = 'liked';
    const SECONDARY_POSITIVE_RELATIONSHIP_TYPE_FAVORITED = 'favorited';
    const SECONDARY_POSITIVE_RELATIONSHIP_TYPE_SAVED = 'saved';
    const SECONDARY_POSITIVE_RELATIONSHIP_TYPE_DISLIKED = 'disliked';
    const SECONDARY_POSITIVE_RELATIONSHIP_TYPE_PURCHASED = 'purchased';
    const SECONDARY_POSITIVE_RELATIONSHIP_TYPE_COMMENTED_ON = 'commentedOn';
    const SECONDARY_POSITIVE_RELATIONSHIP_TYPE_CREATED = 'created';
    const SECONDARY_POSITIVE_RELATIONSHIP_TYPE_VIEWED = 'viewed';
    const SECONDARY_POSITIVE_RELATIONSHIP_TYPE_REPORTED = 'reported';
    const SECONDARY_POSITIVE_RELATIONSHIP_TYPE_BLOCKED = 'blocked';
    const SECONDARY_POSITIVE_RELATIONSHIP_TYPE_DELETED = 'deleted';
    const SECONDARY_POSITIVE_RELATIONSHIP_TYPE_AUTHORED = 'authored';
    const SECONDARY_POSITIVE_RELATIONSHIP_TYPE_USED = 'used';
    const SECONDARY_POSITIVE_RELATIONSHIP_TYPE_DISMISSED = 'dismissed';
    const SECONDARY_POSITIVE_RELATIONSHIP_TYPE_LOGGED_IN = 'loggedIn';
    const SECONDARY_POSITIVE_RELATIONSHIP_TYPE_TAGGED_WITH = 'taggedWith';
    const SECONDARY_POSITIVE_RELATIONSHIP_TYPE_CATEGORIZED_IN = 'categorizedIn';
    const SECONDARY_POSITIVE_RELATIONSHIP_TYPE_INTERESTED_IN = 'interestedIn';
    const SECONDARY_POSITIVE_RELATIONSHIP_TYPE_LOCATED_IN = 'locatedIn';
    const SECONDARY_POSITIVE_RELATIONSHIP_TYPE_READ_QUARTER = 'readQuarter';
    const SECONDARY_POSITIVE_RELATIONSHIP_TYPE_READ_HALF = 'readHalf';
    const SECONDARY_POSITIVE_RELATIONSHIP_TYPE_READ_ALL = 'readAll';
    const SECONDARY_POSITIVE_RELATIONSHIP_TYPE_SUBSCRIBED_TO = 'subscribedTo';
    const SECONDARY_POSITIVE_RELATIONSHIP_TYPE_SUBSCRIBED_FROM = 'subscribedFrom';
    const SECONDARY_POSITIVE_RELATIONSHIP_TYPE_ADDED_TO = 'addedTo';
    const SECONDARY_POSITIVE_RELATIONSHIP_TYPE_MADE_BY = 'madeBy';
    const SECONDARY_POSITIVE_RELATIONSHIP_TYPE_PAUSED_ON = 'pausedOn';
    const PRIMARY_NEGATIVE_RELATIONSHIP_TYPE_POSTED = 'posted';
    const PRIMARY_NEGATIVE_RELATIONSHIP_TYPE_FOLLOWED = 'followed';
    const PRIMARY_NEGATIVE_RELATIONSHIP_TYPE_LIKED = 'liked';
    const PRIMARY_NEGATIVE_RELATIONSHIP_TYPE_FAVORITED = 'favorited';
    const PRIMARY_NEGATIVE_RELATIONSHIP_TYPE_SAVED = 'saved';
    const PRIMARY_NEGATIVE_RELATIONSHIP_TYPE_DISLIKED = 'disliked';
    const PRIMARY_NEGATIVE_RELATIONSHIP_TYPE_PURCHASED = 'purchased';
    const PRIMARY_NEGATIVE_RELATIONSHIP_TYPE_COMMENTED_ON = 'commentedOn';
    const PRIMARY_NEGATIVE_RELATIONSHIP_TYPE_CREATED = 'created';
    const PRIMARY_NEGATIVE_RELATIONSHIP_TYPE_VIEWED = 'viewed';
    const PRIMARY_NEGATIVE_RELATIONSHIP_TYPE_REPORTED = 'reported';
    const PRIMARY_NEGATIVE_RELATIONSHIP_TYPE_BLOCKED = 'blocked';
    const PRIMARY_NEGATIVE_RELATIONSHIP_TYPE_DELETED = 'deleted';
    const PRIMARY_NEGATIVE_RELATIONSHIP_TYPE_AUTHORED = 'authored';
    const PRIMARY_NEGATIVE_RELATIONSHIP_TYPE_USED = 'used';
    const PRIMARY_NEGATIVE_RELATIONSHIP_TYPE_DISMISSED = 'dismissed';
    const PRIMARY_NEGATIVE_RELATIONSHIP_TYPE_LOGGED_IN = 'loggedIn';
    const PRIMARY_NEGATIVE_RELATIONSHIP_TYPE_TAGGED_WITH = 'taggedWith';
    const PRIMARY_NEGATIVE_RELATIONSHIP_TYPE_CATEGORIZED_IN = 'categorizedIn';
    const PRIMARY_NEGATIVE_RELATIONSHIP_TYPE_INTERESTED_IN = 'interestedIn';
    const PRIMARY_NEGATIVE_RELATIONSHIP_TYPE_LOCATED_IN = 'locatedIn';
    const PRIMARY_NEGATIVE_RELATIONSHIP_TYPE_READ_QUARTER = 'readQuarter';
    const PRIMARY_NEGATIVE_RELATIONSHIP_TYPE_READ_HALF = 'readHalf';
    const PRIMARY_NEGATIVE_RELATIONSHIP_TYPE_READ_ALL = 'readAll';
    const PRIMARY_NEGATIVE_RELATIONSHIP_TYPE_SUBSCRIBED_TO = 'subscribedTo';
    const PRIMARY_NEGATIVE_RELATIONSHIP_TYPE_SUBSCRIBED_FROM = 'subscribedFrom';
    const PRIMARY_NEGATIVE_RELATIONSHIP_TYPE_ADDED_TO = 'addedTo';
    const PRIMARY_NEGATIVE_RELATIONSHIP_TYPE_MADE_BY = 'madeBy';
    const PRIMARY_NEGATIVE_RELATIONSHIP_TYPE_PAUSED_ON = 'pausedOn';
    const CONTENT_TAGGED_RELATIONSHIP_TYPE_POSTED = 'posted';
    const CONTENT_TAGGED_RELATIONSHIP_TYPE_FOLLOWED = 'followed';
    const CONTENT_TAGGED_RELATIONSHIP_TYPE_LIKED = 'liked';
    const CONTENT_TAGGED_RELATIONSHIP_TYPE_FAVORITED = 'favorited';
    const CONTENT_TAGGED_RELATIONSHIP_TYPE_SAVED = 'saved';
    const CONTENT_TAGGED_RELATIONSHIP_TYPE_DISLIKED = 'disliked';
    const CONTENT_TAGGED_RELATIONSHIP_TYPE_PURCHASED = 'purchased';
    const CONTENT_TAGGED_RELATIONSHIP_TYPE_COMMENTED_ON = 'commentedOn';
    const CONTENT_TAGGED_RELATIONSHIP_TYPE_CREATED = 'created';
    const CONTENT_TAGGED_RELATIONSHIP_TYPE_VIEWED = 'viewed';
    const CONTENT_TAGGED_RELATIONSHIP_TYPE_REPORTED = 'reported';
    const CONTENT_TAGGED_RELATIONSHIP_TYPE_BLOCKED = 'blocked';
    const CONTENT_TAGGED_RELATIONSHIP_TYPE_DELETED = 'deleted';
    const CONTENT_TAGGED_RELATIONSHIP_TYPE_AUTHORED = 'authored';
    const CONTENT_TAGGED_RELATIONSHIP_TYPE_USED = 'used';
    const CONTENT_TAGGED_RELATIONSHIP_TYPE_DISMISSED = 'dismissed';
    const CONTENT_TAGGED_RELATIONSHIP_TYPE_LOGGED_IN = 'loggedIn';
    const CONTENT_TAGGED_RELATIONSHIP_TYPE_TAGGED_WITH = 'taggedWith';
    const CONTENT_TAGGED_RELATIONSHIP_TYPE_CATEGORIZED_IN = 'categorizedIn';
    const CONTENT_TAGGED_RELATIONSHIP_TYPE_INTERESTED_IN = 'interestedIn';
    const CONTENT_TAGGED_RELATIONSHIP_TYPE_LOCATED_IN = 'locatedIn';
    const CONTENT_TAGGED_RELATIONSHIP_TYPE_READ_QUARTER = 'readQuarter';
    const CONTENT_TAGGED_RELATIONSHIP_TYPE_READ_HALF = 'readHalf';
    const CONTENT_TAGGED_RELATIONSHIP_TYPE_READ_ALL = 'readAll';
    const CONTENT_TAGGED_RELATIONSHIP_TYPE_SUBSCRIBED_TO = 'subscribedTo';
    const CONTENT_TAGGED_RELATIONSHIP_TYPE_SUBSCRIBED_FROM = 'subscribedFrom';
    const CONTENT_TAGGED_RELATIONSHIP_TYPE_ADDED_TO = 'addedTo';
    const CONTENT_TAGGED_RELATIONSHIP_TYPE_MADE_BY = 'madeBy';
    const CONTENT_TAGGED_RELATIONSHIP_TYPE_PAUSED_ON = 'pausedOn';
    const CONTENT_TAG_OBJECT_TYPE_USER = 'user';
    const CONTENT_TAG_OBJECT_TYPE_PRODUCT = 'product';
    const CONTENT_TAG_OBJECT_TYPE_IMAGE = 'image';
    const CONTENT_TAG_OBJECT_TYPE_COMMENT = 'comment';
    const CONTENT_TAG_OBJECT_TYPE_ARTICLE = 'article';
    const CONTENT_TAG_OBJECT_TYPE_POST = 'post';
    const CONTENT_TAG_OBJECT_TYPE_VIDEO = 'video';
    const CONTENT_TAG_OBJECT_TYPE_CONTENT = 'content';
    const CONTENT_TAG_OBJECT_TYPE_TAG = 'tag';
    const CONTENT_TAG_OBJECT_TYPE_CATEGORY = 'category';
    const CONTENT_TAG_OBJECT_TYPE_APP = 'app';
    const CONTENT_TAG_OBJECT_TYPE_BOOK = 'book';
    const CONTENT_TAG_OBJECT_TYPE_PERSON = 'person';
    const CONTENT_TAG_OBJECT_TYPE_SKILL = 'skill';
    const CONTENT_TAG_OBJECT_TYPE_JOB = 'job';
    const CONTENT_TAG_OBJECT_TYPE_COMPANY = 'company';
    const CONTENT_TAG_OBJECT_TYPE_ACCOUNT = 'account';
    const CONTENT_TAG_OBJECT_TYPE_CARD = 'card';
    const CONTENT_TAG_OBJECT_TYPE_COUNTRY = 'country';
    const CONTENT_TAG_OBJECT_TYPE_STATE = 'state';
    const CONTENT_TAG_OBJECT_TYPE_FILM = 'film';
    const CONTENT_TAG_OBJECT_TYPE_CART = 'cart';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getContentObjectTypeAllowableValues()
    {
        return [
            self::CONTENT_OBJECT_TYPE_USER,
            self::CONTENT_OBJECT_TYPE_PRODUCT,
            self::CONTENT_OBJECT_TYPE_IMAGE,
            self::CONTENT_OBJECT_TYPE_COMMENT,
            self::CONTENT_OBJECT_TYPE_ARTICLE,
            self::CONTENT_OBJECT_TYPE_POST,
            self::CONTENT_OBJECT_TYPE_VIDEO,
            self::CONTENT_OBJECT_TYPE_CONTENT,
            self::CONTENT_OBJECT_TYPE_TAG,
            self::CONTENT_OBJECT_TYPE_CATEGORY,
            self::CONTENT_OBJECT_TYPE_APP,
            self::CONTENT_OBJECT_TYPE_BOOK,
            self::CONTENT_OBJECT_TYPE_PERSON,
            self::CONTENT_OBJECT_TYPE_SKILL,
            self::CONTENT_OBJECT_TYPE_JOB,
            self::CONTENT_OBJECT_TYPE_COMPANY,
            self::CONTENT_OBJECT_TYPE_ACCOUNT,
            self::CONTENT_OBJECT_TYPE_CARD,
            self::CONTENT_OBJECT_TYPE_COUNTRY,
            self::CONTENT_OBJECT_TYPE_STATE,
            self::CONTENT_OBJECT_TYPE_FILM,
            self::CONTENT_OBJECT_TYPE_CART,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPrimaryPositiveRelationshipTypeAllowableValues()
    {
        return [
            self::PRIMARY_POSITIVE_RELATIONSHIP_TYPE_POSTED,
            self::PRIMARY_POSITIVE_RELATIONSHIP_TYPE_FOLLOWED,
            self::PRIMARY_POSITIVE_RELATIONSHIP_TYPE_LIKED,
            self::PRIMARY_POSITIVE_RELATIONSHIP_TYPE_FAVORITED,
            self::PRIMARY_POSITIVE_RELATIONSHIP_TYPE_SAVED,
            self::PRIMARY_POSITIVE_RELATIONSHIP_TYPE_DISLIKED,
            self::PRIMARY_POSITIVE_RELATIONSHIP_TYPE_PURCHASED,
            self::PRIMARY_POSITIVE_RELATIONSHIP_TYPE_COMMENTED_ON,
            self::PRIMARY_POSITIVE_RELATIONSHIP_TYPE_CREATED,
            self::PRIMARY_POSITIVE_RELATIONSHIP_TYPE_VIEWED,
            self::PRIMARY_POSITIVE_RELATIONSHIP_TYPE_REPORTED,
            self::PRIMARY_POSITIVE_RELATIONSHIP_TYPE_BLOCKED,
            self::PRIMARY_POSITIVE_RELATIONSHIP_TYPE_DELETED,
            self::PRIMARY_POSITIVE_RELATIONSHIP_TYPE_AUTHORED,
            self::PRIMARY_POSITIVE_RELATIONSHIP_TYPE_USED,
            self::PRIMARY_POSITIVE_RELATIONSHIP_TYPE_DISMISSED,
            self::PRIMARY_POSITIVE_RELATIONSHIP_TYPE_LOGGED_IN,
            self::PRIMARY_POSITIVE_RELATIONSHIP_TYPE_TAGGED_WITH,
            self::PRIMARY_POSITIVE_RELATIONSHIP_TYPE_CATEGORIZED_IN,
            self::PRIMARY_POSITIVE_RELATIONSHIP_TYPE_INTERESTED_IN,
            self::PRIMARY_POSITIVE_RELATIONSHIP_TYPE_LOCATED_IN,
            self::PRIMARY_POSITIVE_RELATIONSHIP_TYPE_READ_QUARTER,
            self::PRIMARY_POSITIVE_RELATIONSHIP_TYPE_READ_HALF,
            self::PRIMARY_POSITIVE_RELATIONSHIP_TYPE_READ_ALL,
            self::PRIMARY_POSITIVE_RELATIONSHIP_TYPE_SUBSCRIBED_TO,
            self::PRIMARY_POSITIVE_RELATIONSHIP_TYPE_SUBSCRIBED_FROM,
            self::PRIMARY_POSITIVE_RELATIONSHIP_TYPE_ADDED_TO,
            self::PRIMARY_POSITIVE_RELATIONSHIP_TYPE_MADE_BY,
            self::PRIMARY_POSITIVE_RELATIONSHIP_TYPE_PAUSED_ON,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSecondaryPositiveRelationshipTypeAllowableValues()
    {
        return [
            self::SECONDARY_POSITIVE_RELATIONSHIP_TYPE_POSTED,
            self::SECONDARY_POSITIVE_RELATIONSHIP_TYPE_FOLLOWED,
            self::SECONDARY_POSITIVE_RELATIONSHIP_TYPE_LIKED,
            self::SECONDARY_POSITIVE_RELATIONSHIP_TYPE_FAVORITED,
            self::SECONDARY_POSITIVE_RELATIONSHIP_TYPE_SAVED,
            self::SECONDARY_POSITIVE_RELATIONSHIP_TYPE_DISLIKED,
            self::SECONDARY_POSITIVE_RELATIONSHIP_TYPE_PURCHASED,
            self::SECONDARY_POSITIVE_RELATIONSHIP_TYPE_COMMENTED_ON,
            self::SECONDARY_POSITIVE_RELATIONSHIP_TYPE_CREATED,
            self::SECONDARY_POSITIVE_RELATIONSHIP_TYPE_VIEWED,
            self::SECONDARY_POSITIVE_RELATIONSHIP_TYPE_REPORTED,
            self::SECONDARY_POSITIVE_RELATIONSHIP_TYPE_BLOCKED,
            self::SECONDARY_POSITIVE_RELATIONSHIP_TYPE_DELETED,
            self::SECONDARY_POSITIVE_RELATIONSHIP_TYPE_AUTHORED,
            self::SECONDARY_POSITIVE_RELATIONSHIP_TYPE_USED,
            self::SECONDARY_POSITIVE_RELATIONSHIP_TYPE_DISMISSED,
            self::SECONDARY_POSITIVE_RELATIONSHIP_TYPE_LOGGED_IN,
            self::SECONDARY_POSITIVE_RELATIONSHIP_TYPE_TAGGED_WITH,
            self::SECONDARY_POSITIVE_RELATIONSHIP_TYPE_CATEGORIZED_IN,
            self::SECONDARY_POSITIVE_RELATIONSHIP_TYPE_INTERESTED_IN,
            self::SECONDARY_POSITIVE_RELATIONSHIP_TYPE_LOCATED_IN,
            self::SECONDARY_POSITIVE_RELATIONSHIP_TYPE_READ_QUARTER,
            self::SECONDARY_POSITIVE_RELATIONSHIP_TYPE_READ_HALF,
            self::SECONDARY_POSITIVE_RELATIONSHIP_TYPE_READ_ALL,
            self::SECONDARY_POSITIVE_RELATIONSHIP_TYPE_SUBSCRIBED_TO,
            self::SECONDARY_POSITIVE_RELATIONSHIP_TYPE_SUBSCRIBED_FROM,
            self::SECONDARY_POSITIVE_RELATIONSHIP_TYPE_ADDED_TO,
            self::SECONDARY_POSITIVE_RELATIONSHIP_TYPE_MADE_BY,
            self::SECONDARY_POSITIVE_RELATIONSHIP_TYPE_PAUSED_ON,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPrimaryNegativeRelationshipTypeAllowableValues()
    {
        return [
            self::PRIMARY_NEGATIVE_RELATIONSHIP_TYPE_POSTED,
            self::PRIMARY_NEGATIVE_RELATIONSHIP_TYPE_FOLLOWED,
            self::PRIMARY_NEGATIVE_RELATIONSHIP_TYPE_LIKED,
            self::PRIMARY_NEGATIVE_RELATIONSHIP_TYPE_FAVORITED,
            self::PRIMARY_NEGATIVE_RELATIONSHIP_TYPE_SAVED,
            self::PRIMARY_NEGATIVE_RELATIONSHIP_TYPE_DISLIKED,
            self::PRIMARY_NEGATIVE_RELATIONSHIP_TYPE_PURCHASED,
            self::PRIMARY_NEGATIVE_RELATIONSHIP_TYPE_COMMENTED_ON,
            self::PRIMARY_NEGATIVE_RELATIONSHIP_TYPE_CREATED,
            self::PRIMARY_NEGATIVE_RELATIONSHIP_TYPE_VIEWED,
            self::PRIMARY_NEGATIVE_RELATIONSHIP_TYPE_REPORTED,
            self::PRIMARY_NEGATIVE_RELATIONSHIP_TYPE_BLOCKED,
            self::PRIMARY_NEGATIVE_RELATIONSHIP_TYPE_DELETED,
            self::PRIMARY_NEGATIVE_RELATIONSHIP_TYPE_AUTHORED,
            self::PRIMARY_NEGATIVE_RELATIONSHIP_TYPE_USED,
            self::PRIMARY_NEGATIVE_RELATIONSHIP_TYPE_DISMISSED,
            self::PRIMARY_NEGATIVE_RELATIONSHIP_TYPE_LOGGED_IN,
            self::PRIMARY_NEGATIVE_RELATIONSHIP_TYPE_TAGGED_WITH,
            self::PRIMARY_NEGATIVE_RELATIONSHIP_TYPE_CATEGORIZED_IN,
            self::PRIMARY_NEGATIVE_RELATIONSHIP_TYPE_INTERESTED_IN,
            self::PRIMARY_NEGATIVE_RELATIONSHIP_TYPE_LOCATED_IN,
            self::PRIMARY_NEGATIVE_RELATIONSHIP_TYPE_READ_QUARTER,
            self::PRIMARY_NEGATIVE_RELATIONSHIP_TYPE_READ_HALF,
            self::PRIMARY_NEGATIVE_RELATIONSHIP_TYPE_READ_ALL,
            self::PRIMARY_NEGATIVE_RELATIONSHIP_TYPE_SUBSCRIBED_TO,
            self::PRIMARY_NEGATIVE_RELATIONSHIP_TYPE_SUBSCRIBED_FROM,
            self::PRIMARY_NEGATIVE_RELATIONSHIP_TYPE_ADDED_TO,
            self::PRIMARY_NEGATIVE_RELATIONSHIP_TYPE_MADE_BY,
            self::PRIMARY_NEGATIVE_RELATIONSHIP_TYPE_PAUSED_ON,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getContentTaggedRelationshipTypeAllowableValues()
    {
        return [
            self::CONTENT_TAGGED_RELATIONSHIP_TYPE_POSTED,
            self::CONTENT_TAGGED_RELATIONSHIP_TYPE_FOLLOWED,
            self::CONTENT_TAGGED_RELATIONSHIP_TYPE_LIKED,
            self::CONTENT_TAGGED_RELATIONSHIP_TYPE_FAVORITED,
            self::CONTENT_TAGGED_RELATIONSHIP_TYPE_SAVED,
            self::CONTENT_TAGGED_RELATIONSHIP_TYPE_DISLIKED,
            self::CONTENT_TAGGED_RELATIONSHIP_TYPE_PURCHASED,
            self::CONTENT_TAGGED_RELATIONSHIP_TYPE_COMMENTED_ON,
            self::CONTENT_TAGGED_RELATIONSHIP_TYPE_CREATED,
            self::CONTENT_TAGGED_RELATIONSHIP_TYPE_VIEWED,
            self::CONTENT_TAGGED_RELATIONSHIP_TYPE_REPORTED,
            self::CONTENT_TAGGED_RELATIONSHIP_TYPE_BLOCKED,
            self::CONTENT_TAGGED_RELATIONSHIP_TYPE_DELETED,
            self::CONTENT_TAGGED_RELATIONSHIP_TYPE_AUTHORED,
            self::CONTENT_TAGGED_RELATIONSHIP_TYPE_USED,
            self::CONTENT_TAGGED_RELATIONSHIP_TYPE_DISMISSED,
            self::CONTENT_TAGGED_RELATIONSHIP_TYPE_LOGGED_IN,
            self::CONTENT_TAGGED_RELATIONSHIP_TYPE_TAGGED_WITH,
            self::CONTENT_TAGGED_RELATIONSHIP_TYPE_CATEGORIZED_IN,
            self::CONTENT_TAGGED_RELATIONSHIP_TYPE_INTERESTED_IN,
            self::CONTENT_TAGGED_RELATIONSHIP_TYPE_LOCATED_IN,
            self::CONTENT_TAGGED_RELATIONSHIP_TYPE_READ_QUARTER,
            self::CONTENT_TAGGED_RELATIONSHIP_TYPE_READ_HALF,
            self::CONTENT_TAGGED_RELATIONSHIP_TYPE_READ_ALL,
            self::CONTENT_TAGGED_RELATIONSHIP_TYPE_SUBSCRIBED_TO,
            self::CONTENT_TAGGED_RELATIONSHIP_TYPE_SUBSCRIBED_FROM,
            self::CONTENT_TAGGED_RELATIONSHIP_TYPE_ADDED_TO,
            self::CONTENT_TAGGED_RELATIONSHIP_TYPE_MADE_BY,
            self::CONTENT_TAGGED_RELATIONSHIP_TYPE_PAUSED_ON,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getContentTagObjectTypeAllowableValues()
    {
        return [
            self::CONTENT_TAG_OBJECT_TYPE_USER,
            self::CONTENT_TAG_OBJECT_TYPE_PRODUCT,
            self::CONTENT_TAG_OBJECT_TYPE_IMAGE,
            self::CONTENT_TAG_OBJECT_TYPE_COMMENT,
            self::CONTENT_TAG_OBJECT_TYPE_ARTICLE,
            self::CONTENT_TAG_OBJECT_TYPE_POST,
            self::CONTENT_TAG_OBJECT_TYPE_VIDEO,
            self::CONTENT_TAG_OBJECT_TYPE_CONTENT,
            self::CONTENT_TAG_OBJECT_TYPE_TAG,
            self::CONTENT_TAG_OBJECT_TYPE_CATEGORY,
            self::CONTENT_TAG_OBJECT_TYPE_APP,
            self::CONTENT_TAG_OBJECT_TYPE_BOOK,
            self::CONTENT_TAG_OBJECT_TYPE_PERSON,
            self::CONTENT_TAG_OBJECT_TYPE_SKILL,
            self::CONTENT_TAG_OBJECT_TYPE_JOB,
            self::CONTENT_TAG_OBJECT_TYPE_COMPANY,
            self::CONTENT_TAG_OBJECT_TYPE_ACCOUNT,
            self::CONTENT_TAG_OBJECT_TYPE_CARD,
            self::CONTENT_TAG_OBJECT_TYPE_COUNTRY,
            self::CONTENT_TAG_OBJECT_TYPE_STATE,
            self::CONTENT_TAG_OBJECT_TYPE_FILM,
            self::CONTENT_TAG_OBJECT_TYPE_CART,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['object'] = isset($data['object']) ? $data['object'] : null;
        $this->container['content_object_type'] = isset($data['content_object_type']) ? $data['content_object_type'] : null;
        $this->container['primary_positive_relationship_type'] = isset($data['primary_positive_relationship_type']) ? $data['primary_positive_relationship_type'] : 'liked';
        $this->container['secondary_positive_relationship_type'] = isset($data['secondary_positive_relationship_type']) ? $data['secondary_positive_relationship_type'] : 'viewed';
        $this->container['primary_negative_relationship_type'] = isset($data['primary_negative_relationship_type']) ? $data['primary_negative_relationship_type'] : 'disliked';
        $this->container['content_tagged_relationship_type'] = isset($data['content_tagged_relationship_type']) ? $data['content_tagged_relationship_type'] : 'taggedWith';
        $this->container['content_tag_object_type'] = isset($data['content_tag_object_type']) ? $data['content_tag_object_type'] : 'tag';
        $this->container['coldstart_tag_ids'] = isset($data['coldstart_tag_ids']) ? $data['coldstart_tag_ids'] : null;
        $this->container['limit'] = isset($data['limit']) ? $data['limit'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['object'] === null) {
            $invalidProperties[] = "'object' can't be null";
        }
        if ($this->container['content_object_type'] === null) {
            $invalidProperties[] = "'content_object_type' can't be null";
        }
        $allowedValues = $this->getContentObjectTypeAllowableValues();
        if (!is_null($this->container['content_object_type']) && !in_array($this->container['content_object_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'content_object_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPrimaryPositiveRelationshipTypeAllowableValues();
        if (!is_null($this->container['primary_positive_relationship_type']) && !in_array($this->container['primary_positive_relationship_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'primary_positive_relationship_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSecondaryPositiveRelationshipTypeAllowableValues();
        if (!is_null($this->container['secondary_positive_relationship_type']) && !in_array($this->container['secondary_positive_relationship_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'secondary_positive_relationship_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPrimaryNegativeRelationshipTypeAllowableValues();
        if (!is_null($this->container['primary_negative_relationship_type']) && !in_array($this->container['primary_negative_relationship_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'primary_negative_relationship_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getContentTaggedRelationshipTypeAllowableValues();
        if (!is_null($this->container['content_tagged_relationship_type']) && !in_array($this->container['content_tagged_relationship_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'content_tagged_relationship_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getContentTagObjectTypeAllowableValues();
        if (!is_null($this->container['content_tag_object_type']) && !in_array($this->container['content_tag_object_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'content_tag_object_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets object
     *
     * @return \Pipeless\Model\ObjectLookup
     */
    public function getObject()
    {
        return $this->container['object'];
    }

    /**
     * Sets object
     *
     * @param \Pipeless\Model\ObjectLookup $object object
     *
     * @return $this
     */
    public function setObject($object)
    {
        $this->container['object'] = $object;

        return $this;
    }

    /**
     * Gets content_object_type
     *
     * @return string
     */
    public function getContentObjectType()
    {
        return $this->container['content_object_type'];
    }

    /**
     * Sets content_object_type
     *
     * @param string $content_object_type The type of object that is being recommended.
     *
     * @return $this
     */
    public function setContentObjectType($content_object_type)
    {
        $allowedValues = $this->getContentObjectTypeAllowableValues();
        if (!in_array($content_object_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'content_object_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['content_object_type'] = $content_object_type;

        return $this;
    }

    /**
     * Gets primary_positive_relationship_type
     *
     * @return string|null
     */
    public function getPrimaryPositiveRelationshipType()
    {
        return $this->container['primary_positive_relationship_type'];
    }

    /**
     * Sets primary_positive_relationship_type
     *
     * @param string|null $primary_positive_relationship_type The primary positive indicator a user can take on the content type that's being recommended. This should be the action a user can take that you consider most important to indicating that an object appeals to their tastes. If value is not provided, it will default to \"liked\".
     *
     * @return $this
     */
    public function setPrimaryPositiveRelationshipType($primary_positive_relationship_type)
    {
        $allowedValues = $this->getPrimaryPositiveRelationshipTypeAllowableValues();
        if (!is_null($primary_positive_relationship_type) && !in_array($primary_positive_relationship_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'primary_positive_relationship_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['primary_positive_relationship_type'] = $primary_positive_relationship_type;

        return $this;
    }

    /**
     * Gets secondary_positive_relationship_type
     *
     * @return string|null
     */
    public function getSecondaryPositiveRelationshipType()
    {
        return $this->container['secondary_positive_relationship_type'];
    }

    /**
     * Sets secondary_positive_relationship_type
     *
     * @param string|null $secondary_positive_relationship_type The secondary positive indicator a user can take on the content type that's being recommended. This should be the action a user can take that you consider to be important in indicating that an object appeals to their tastes. It will be weighted less than the primary positive relationship type, but still taken into account. If value is not provided, it will default to \"viewed\".
     *
     * @return $this
     */
    public function setSecondaryPositiveRelationshipType($secondary_positive_relationship_type)
    {
        $allowedValues = $this->getSecondaryPositiveRelationshipTypeAllowableValues();
        if (!is_null($secondary_positive_relationship_type) && !in_array($secondary_positive_relationship_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'secondary_positive_relationship_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['secondary_positive_relationship_type'] = $secondary_positive_relationship_type;

        return $this;
    }

    /**
     * Gets primary_negative_relationship_type
     *
     * @return string|null
     */
    public function getPrimaryNegativeRelationshipType()
    {
        return $this->container['primary_negative_relationship_type'];
    }

    /**
     * Sets primary_negative_relationship_type
     *
     * @param string|null $primary_negative_relationship_type The primary negative action a user can take on the content type. This should be the action a user can take that you consider to be important in indicating that an object does not appeal to their tastes. Content that the user marked with this type will not be returned in recommendation results. If value is not provided, it will default to \"disliked\".
     *
     * @return $this
     */
    public function setPrimaryNegativeRelationshipType($primary_negative_relationship_type)
    {
        $allowedValues = $this->getPrimaryNegativeRelationshipTypeAllowableValues();
        if (!is_null($primary_negative_relationship_type) && !in_array($primary_negative_relationship_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'primary_negative_relationship_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['primary_negative_relationship_type'] = $primary_negative_relationship_type;

        return $this;
    }

    /**
     * Gets content_tagged_relationship_type
     *
     * @return string|null
     */
    public function getContentTaggedRelationshipType()
    {
        return $this->container['content_tagged_relationship_type'];
    }

    /**
     * Sets content_tagged_relationship_type
     *
     * @param string|null $content_tagged_relationship_type Set this relationship to the relationship you use to set tags on the content that is being recommended. If a value is not provided, \"taggedWith\" will be used by default.
     *
     * @return $this
     */
    public function setContentTaggedRelationshipType($content_tagged_relationship_type)
    {
        $allowedValues = $this->getContentTaggedRelationshipTypeAllowableValues();
        if (!is_null($content_tagged_relationship_type) && !in_array($content_tagged_relationship_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'content_tagged_relationship_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['content_tagged_relationship_type'] = $content_tagged_relationship_type;

        return $this;
    }

    /**
     * Gets content_tag_object_type
     *
     * @return string|null
     */
    public function getContentTagObjectType()
    {
        return $this->container['content_tag_object_type'];
    }

    /**
     * Sets content_tag_object_type
     *
     * @param string|null $content_tag_object_type Set this relationship to the object you use for tags on the content that is being recommended. If a value is not provided, \"tag\" will be used by default.
     *
     * @return $this
     */
    public function setContentTagObjectType($content_tag_object_type)
    {
        $allowedValues = $this->getContentTagObjectTypeAllowableValues();
        if (!is_null($content_tag_object_type) && !in_array($content_tag_object_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'content_tag_object_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['content_tag_object_type'] = $content_tag_object_type;

        return $this;
    }

    /**
     * Gets coldstart_tag_ids
     *
     * @return string[]|null
     */
    public function getColdstartTagIds()
    {
        return $this->container['coldstart_tag_ids'];
    }

    /**
     * Sets coldstart_tag_ids
     *
     * @param string[]|null $coldstart_tag_ids You can use this option to provide some ids of tags you want to contribute to coldstart recommendations if no real recommendations are yet available for a user. If you provide one or more tag ids for this field, trending content from those tags will be used as coldstart recommendations when personalized recommendations are not available.
     *
     * @return $this
     */
    public function setColdstartTagIds($coldstart_tag_ids)
    {
        $this->container['coldstart_tag_ids'] = $coldstart_tag_ids;

        return $this;
    }

    /**
     * Gets limit
     *
     * @return int|null
     */
    public function getLimit()
    {
        return $this->container['limit'];
    }

    /**
     * Sets limit
     *
     * @param int|null $limit limit
     *
     * @return $this
     */
    public function setLimit($limit)
    {
        $this->container['limit'] = $limit;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


