<?php
/**
 * RelationshipType
 *
 * PHP version 5
 *
 * @category Class
 * @package  Pipeless
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Pipeless
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Pipeless\Model;
use \Pipeless\ObjectSerializer;

/**
 * RelationshipType Class Doc Comment
 *
 * @category Class
 * @description The type of relationship for an event. Can be any one of our predefined types. Although it is flexible what relationship type you use, as a best practice, we suggest you pick the one that relates best to the data you are representing. Doing this also allows specific algos to automatically work with their default settings.
 * @package  Pipeless
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class RelationshipType
{
    /**
     * Possible values of this enum
     */
    const POSTED = 'posted';
    const FOLLOWED = 'followed';
    const LIKED = 'liked';
    const FAVORITED = 'favorited';
    const SAVED = 'saved';
    const DISLIKED = 'disliked';
    const PURCHASED = 'purchased';
    const COMMENTED_ON = 'commentedOn';
    const CREATED = 'created';
    const VIEWED = 'viewed';
    const REPORTED = 'reported';
    const BLOCKED = 'blocked';
    const DELETED = 'deleted';
    const AUTHORED = 'authored';
    const USED = 'used';
    const DISMISSED = 'dismissed';
    const LOGGED_IN = 'loggedIn';
    const TAGGED_WITH = 'taggedWith';
    const CATEGORIZED_IN = 'categorizedIn';
    const INTERESTED_IN = 'interestedIn';
    const LOCATED_IN = 'locatedIn';
    const READ_QUARTER = 'readQuarter';
    const READ_HALF = 'readHalf';
    const READ_ALL = 'readAll';
    const SUBSCRIBED_TO = 'subscribedTo';
    const SUBSCRIBED_FROM = 'subscribedFrom';
    const ADDED_TO = 'addedTo';
    const MADE_BY = 'madeBy';
    const PAUSED_ON = 'pausedOn';
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public static function getAllowableEnumValues()
    {
        return [
            self::POSTED,
            self::FOLLOWED,
            self::LIKED,
            self::FAVORITED,
            self::SAVED,
            self::DISLIKED,
            self::PURCHASED,
            self::COMMENTED_ON,
            self::CREATED,
            self::VIEWED,
            self::REPORTED,
            self::BLOCKED,
            self::DELETED,
            self::AUTHORED,
            self::USED,
            self::DISMISSED,
            self::LOGGED_IN,
            self::TAGGED_WITH,
            self::CATEGORIZED_IN,
            self::INTERESTED_IN,
            self::LOCATED_IN,
            self::READ_QUARTER,
            self::READ_HALF,
            self::READ_ALL,
            self::SUBSCRIBED_TO,
            self::SUBSCRIBED_FROM,
            self::ADDED_TO,
            self::MADE_BY,
            self::PAUSED_ON,
        ];
    }
}


