<?php
/**
 * InlineObject7
 *
 * PHP version 5
 *
 * @category Class
 * @package  Pipeless
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Pipeless
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Pipeless\Model;

use \ArrayAccess;
use \Pipeless\ObjectSerializer;

/**
 * InlineObject7 Class Doc Comment
 *
 * @category Class
 * @package  Pipeless
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class InlineObject7 implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object_7';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'object' => '\Pipeless\Model\ObjectLookup',
        'follow_relationship_types' => 'string[]',
        'follow_object_types' => 'string[]',
        'event_relationship_types' => 'string[]',
        'event_object_types' => 'string[]',
        'exclude_self_object' => 'bool',
        'limit' => 'int',
        'before' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'object' => null,
        'follow_relationship_types' => null,
        'follow_object_types' => null,
        'event_relationship_types' => null,
        'event_object_types' => null,
        'exclude_self_object' => null,
        'limit' => null,
        'before' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'object' => 'object',
        'follow_relationship_types' => 'follow_relationship_types',
        'follow_object_types' => 'follow_object_types',
        'event_relationship_types' => 'event_relationship_types',
        'event_object_types' => 'event_object_types',
        'exclude_self_object' => 'exclude_self_object',
        'limit' => 'limit',
        'before' => 'before'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'object' => 'setObject',
        'follow_relationship_types' => 'setFollowRelationshipTypes',
        'follow_object_types' => 'setFollowObjectTypes',
        'event_relationship_types' => 'setEventRelationshipTypes',
        'event_object_types' => 'setEventObjectTypes',
        'exclude_self_object' => 'setExcludeSelfObject',
        'limit' => 'setLimit',
        'before' => 'setBefore'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'object' => 'getObject',
        'follow_relationship_types' => 'getFollowRelationshipTypes',
        'follow_object_types' => 'getFollowObjectTypes',
        'event_relationship_types' => 'getEventRelationshipTypes',
        'event_object_types' => 'getEventObjectTypes',
        'exclude_self_object' => 'getExcludeSelfObject',
        'limit' => 'getLimit',
        'before' => 'getBefore'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const FOLLOW_RELATIONSHIP_TYPES_POSTED = 'posted';
    const FOLLOW_RELATIONSHIP_TYPES_FOLLOWED = 'followed';
    const FOLLOW_RELATIONSHIP_TYPES_LIKED = 'liked';
    const FOLLOW_RELATIONSHIP_TYPES_FAVORITED = 'favorited';
    const FOLLOW_RELATIONSHIP_TYPES_SAVED = 'saved';
    const FOLLOW_RELATIONSHIP_TYPES_DISLIKED = 'disliked';
    const FOLLOW_RELATIONSHIP_TYPES_PURCHASED = 'purchased';
    const FOLLOW_RELATIONSHIP_TYPES_COMMENTED_ON = 'commentedOn';
    const FOLLOW_RELATIONSHIP_TYPES_CREATED = 'created';
    const FOLLOW_RELATIONSHIP_TYPES_VIEWED = 'viewed';
    const FOLLOW_RELATIONSHIP_TYPES_REPORTED = 'reported';
    const FOLLOW_RELATIONSHIP_TYPES_BLOCKED = 'blocked';
    const FOLLOW_RELATIONSHIP_TYPES_DELETED = 'deleted';
    const FOLLOW_RELATIONSHIP_TYPES_AUTHORED = 'authored';
    const FOLLOW_RELATIONSHIP_TYPES_USED = 'used';
    const FOLLOW_RELATIONSHIP_TYPES_DISMISSED = 'dismissed';
    const FOLLOW_RELATIONSHIP_TYPES_LOGGED_IN = 'loggedIn';
    const FOLLOW_RELATIONSHIP_TYPES_TAGGED_WITH = 'taggedWith';
    const FOLLOW_RELATIONSHIP_TYPES_CATEGORIZED_IN = 'categorizedIn';
    const FOLLOW_RELATIONSHIP_TYPES_INTERESTED_IN = 'interestedIn';
    const FOLLOW_RELATIONSHIP_TYPES_LOCATED_IN = 'locatedIn';
    const FOLLOW_RELATIONSHIP_TYPES_READ_QUARTER = 'readQuarter';
    const FOLLOW_RELATIONSHIP_TYPES_READ_HALF = 'readHalf';
    const FOLLOW_RELATIONSHIP_TYPES_READ_ALL = 'readAll';
    const FOLLOW_RELATIONSHIP_TYPES_SUBSCRIBED_TO = 'subscribedTo';
    const FOLLOW_RELATIONSHIP_TYPES_SUBSCRIBED_FROM = 'subscribedFrom';
    const FOLLOW_RELATIONSHIP_TYPES_ADDED_TO = 'addedTo';
    const FOLLOW_RELATIONSHIP_TYPES_MADE_BY = 'madeBy';
    const FOLLOW_RELATIONSHIP_TYPES_PAUSED_ON = 'pausedOn';
    const FOLLOW_OBJECT_TYPES_USER = 'user';
    const FOLLOW_OBJECT_TYPES_PRODUCT = 'product';
    const FOLLOW_OBJECT_TYPES_IMAGE = 'image';
    const FOLLOW_OBJECT_TYPES_COMMENT = 'comment';
    const FOLLOW_OBJECT_TYPES_ARTICLE = 'article';
    const FOLLOW_OBJECT_TYPES_POST = 'post';
    const FOLLOW_OBJECT_TYPES_VIDEO = 'video';
    const FOLLOW_OBJECT_TYPES_CONTENT = 'content';
    const FOLLOW_OBJECT_TYPES_TAG = 'tag';
    const FOLLOW_OBJECT_TYPES_CATEGORY = 'category';
    const FOLLOW_OBJECT_TYPES_APP = 'app';
    const FOLLOW_OBJECT_TYPES_BOOK = 'book';
    const FOLLOW_OBJECT_TYPES_PERSON = 'person';
    const FOLLOW_OBJECT_TYPES_SKILL = 'skill';
    const FOLLOW_OBJECT_TYPES_JOB = 'job';
    const FOLLOW_OBJECT_TYPES_COMPANY = 'company';
    const FOLLOW_OBJECT_TYPES_ACCOUNT = 'account';
    const FOLLOW_OBJECT_TYPES_CARD = 'card';
    const FOLLOW_OBJECT_TYPES_COUNTRY = 'country';
    const FOLLOW_OBJECT_TYPES_STATE = 'state';
    const FOLLOW_OBJECT_TYPES_FILM = 'film';
    const FOLLOW_OBJECT_TYPES_CART = 'cart';
    const EVENT_RELATIONSHIP_TYPES_POSTED = 'posted';
    const EVENT_RELATIONSHIP_TYPES_FOLLOWED = 'followed';
    const EVENT_RELATIONSHIP_TYPES_LIKED = 'liked';
    const EVENT_RELATIONSHIP_TYPES_FAVORITED = 'favorited';
    const EVENT_RELATIONSHIP_TYPES_SAVED = 'saved';
    const EVENT_RELATIONSHIP_TYPES_DISLIKED = 'disliked';
    const EVENT_RELATIONSHIP_TYPES_PURCHASED = 'purchased';
    const EVENT_RELATIONSHIP_TYPES_COMMENTED_ON = 'commentedOn';
    const EVENT_RELATIONSHIP_TYPES_CREATED = 'created';
    const EVENT_RELATIONSHIP_TYPES_VIEWED = 'viewed';
    const EVENT_RELATIONSHIP_TYPES_REPORTED = 'reported';
    const EVENT_RELATIONSHIP_TYPES_BLOCKED = 'blocked';
    const EVENT_RELATIONSHIP_TYPES_DELETED = 'deleted';
    const EVENT_RELATIONSHIP_TYPES_AUTHORED = 'authored';
    const EVENT_RELATIONSHIP_TYPES_USED = 'used';
    const EVENT_RELATIONSHIP_TYPES_DISMISSED = 'dismissed';
    const EVENT_RELATIONSHIP_TYPES_LOGGED_IN = 'loggedIn';
    const EVENT_RELATIONSHIP_TYPES_TAGGED_WITH = 'taggedWith';
    const EVENT_RELATIONSHIP_TYPES_CATEGORIZED_IN = 'categorizedIn';
    const EVENT_RELATIONSHIP_TYPES_INTERESTED_IN = 'interestedIn';
    const EVENT_RELATIONSHIP_TYPES_LOCATED_IN = 'locatedIn';
    const EVENT_RELATIONSHIP_TYPES_READ_QUARTER = 'readQuarter';
    const EVENT_RELATIONSHIP_TYPES_READ_HALF = 'readHalf';
    const EVENT_RELATIONSHIP_TYPES_READ_ALL = 'readAll';
    const EVENT_RELATIONSHIP_TYPES_SUBSCRIBED_TO = 'subscribedTo';
    const EVENT_RELATIONSHIP_TYPES_SUBSCRIBED_FROM = 'subscribedFrom';
    const EVENT_RELATIONSHIP_TYPES_ADDED_TO = 'addedTo';
    const EVENT_RELATIONSHIP_TYPES_MADE_BY = 'madeBy';
    const EVENT_RELATIONSHIP_TYPES_PAUSED_ON = 'pausedOn';
    const EVENT_OBJECT_TYPES_USER = 'user';
    const EVENT_OBJECT_TYPES_PRODUCT = 'product';
    const EVENT_OBJECT_TYPES_IMAGE = 'image';
    const EVENT_OBJECT_TYPES_COMMENT = 'comment';
    const EVENT_OBJECT_TYPES_ARTICLE = 'article';
    const EVENT_OBJECT_TYPES_POST = 'post';
    const EVENT_OBJECT_TYPES_VIDEO = 'video';
    const EVENT_OBJECT_TYPES_CONTENT = 'content';
    const EVENT_OBJECT_TYPES_TAG = 'tag';
    const EVENT_OBJECT_TYPES_CATEGORY = 'category';
    const EVENT_OBJECT_TYPES_APP = 'app';
    const EVENT_OBJECT_TYPES_BOOK = 'book';
    const EVENT_OBJECT_TYPES_PERSON = 'person';
    const EVENT_OBJECT_TYPES_SKILL = 'skill';
    const EVENT_OBJECT_TYPES_JOB = 'job';
    const EVENT_OBJECT_TYPES_COMPANY = 'company';
    const EVENT_OBJECT_TYPES_ACCOUNT = 'account';
    const EVENT_OBJECT_TYPES_CARD = 'card';
    const EVENT_OBJECT_TYPES_COUNTRY = 'country';
    const EVENT_OBJECT_TYPES_STATE = 'state';
    const EVENT_OBJECT_TYPES_FILM = 'film';
    const EVENT_OBJECT_TYPES_CART = 'cart';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFollowRelationshipTypesAllowableValues()
    {
        return [
            self::FOLLOW_RELATIONSHIP_TYPES_POSTED,
            self::FOLLOW_RELATIONSHIP_TYPES_FOLLOWED,
            self::FOLLOW_RELATIONSHIP_TYPES_LIKED,
            self::FOLLOW_RELATIONSHIP_TYPES_FAVORITED,
            self::FOLLOW_RELATIONSHIP_TYPES_SAVED,
            self::FOLLOW_RELATIONSHIP_TYPES_DISLIKED,
            self::FOLLOW_RELATIONSHIP_TYPES_PURCHASED,
            self::FOLLOW_RELATIONSHIP_TYPES_COMMENTED_ON,
            self::FOLLOW_RELATIONSHIP_TYPES_CREATED,
            self::FOLLOW_RELATIONSHIP_TYPES_VIEWED,
            self::FOLLOW_RELATIONSHIP_TYPES_REPORTED,
            self::FOLLOW_RELATIONSHIP_TYPES_BLOCKED,
            self::FOLLOW_RELATIONSHIP_TYPES_DELETED,
            self::FOLLOW_RELATIONSHIP_TYPES_AUTHORED,
            self::FOLLOW_RELATIONSHIP_TYPES_USED,
            self::FOLLOW_RELATIONSHIP_TYPES_DISMISSED,
            self::FOLLOW_RELATIONSHIP_TYPES_LOGGED_IN,
            self::FOLLOW_RELATIONSHIP_TYPES_TAGGED_WITH,
            self::FOLLOW_RELATIONSHIP_TYPES_CATEGORIZED_IN,
            self::FOLLOW_RELATIONSHIP_TYPES_INTERESTED_IN,
            self::FOLLOW_RELATIONSHIP_TYPES_LOCATED_IN,
            self::FOLLOW_RELATIONSHIP_TYPES_READ_QUARTER,
            self::FOLLOW_RELATIONSHIP_TYPES_READ_HALF,
            self::FOLLOW_RELATIONSHIP_TYPES_READ_ALL,
            self::FOLLOW_RELATIONSHIP_TYPES_SUBSCRIBED_TO,
            self::FOLLOW_RELATIONSHIP_TYPES_SUBSCRIBED_FROM,
            self::FOLLOW_RELATIONSHIP_TYPES_ADDED_TO,
            self::FOLLOW_RELATIONSHIP_TYPES_MADE_BY,
            self::FOLLOW_RELATIONSHIP_TYPES_PAUSED_ON,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFollowObjectTypesAllowableValues()
    {
        return [
            self::FOLLOW_OBJECT_TYPES_USER,
            self::FOLLOW_OBJECT_TYPES_PRODUCT,
            self::FOLLOW_OBJECT_TYPES_IMAGE,
            self::FOLLOW_OBJECT_TYPES_COMMENT,
            self::FOLLOW_OBJECT_TYPES_ARTICLE,
            self::FOLLOW_OBJECT_TYPES_POST,
            self::FOLLOW_OBJECT_TYPES_VIDEO,
            self::FOLLOW_OBJECT_TYPES_CONTENT,
            self::FOLLOW_OBJECT_TYPES_TAG,
            self::FOLLOW_OBJECT_TYPES_CATEGORY,
            self::FOLLOW_OBJECT_TYPES_APP,
            self::FOLLOW_OBJECT_TYPES_BOOK,
            self::FOLLOW_OBJECT_TYPES_PERSON,
            self::FOLLOW_OBJECT_TYPES_SKILL,
            self::FOLLOW_OBJECT_TYPES_JOB,
            self::FOLLOW_OBJECT_TYPES_COMPANY,
            self::FOLLOW_OBJECT_TYPES_ACCOUNT,
            self::FOLLOW_OBJECT_TYPES_CARD,
            self::FOLLOW_OBJECT_TYPES_COUNTRY,
            self::FOLLOW_OBJECT_TYPES_STATE,
            self::FOLLOW_OBJECT_TYPES_FILM,
            self::FOLLOW_OBJECT_TYPES_CART,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEventRelationshipTypesAllowableValues()
    {
        return [
            self::EVENT_RELATIONSHIP_TYPES_POSTED,
            self::EVENT_RELATIONSHIP_TYPES_FOLLOWED,
            self::EVENT_RELATIONSHIP_TYPES_LIKED,
            self::EVENT_RELATIONSHIP_TYPES_FAVORITED,
            self::EVENT_RELATIONSHIP_TYPES_SAVED,
            self::EVENT_RELATIONSHIP_TYPES_DISLIKED,
            self::EVENT_RELATIONSHIP_TYPES_PURCHASED,
            self::EVENT_RELATIONSHIP_TYPES_COMMENTED_ON,
            self::EVENT_RELATIONSHIP_TYPES_CREATED,
            self::EVENT_RELATIONSHIP_TYPES_VIEWED,
            self::EVENT_RELATIONSHIP_TYPES_REPORTED,
            self::EVENT_RELATIONSHIP_TYPES_BLOCKED,
            self::EVENT_RELATIONSHIP_TYPES_DELETED,
            self::EVENT_RELATIONSHIP_TYPES_AUTHORED,
            self::EVENT_RELATIONSHIP_TYPES_USED,
            self::EVENT_RELATIONSHIP_TYPES_DISMISSED,
            self::EVENT_RELATIONSHIP_TYPES_LOGGED_IN,
            self::EVENT_RELATIONSHIP_TYPES_TAGGED_WITH,
            self::EVENT_RELATIONSHIP_TYPES_CATEGORIZED_IN,
            self::EVENT_RELATIONSHIP_TYPES_INTERESTED_IN,
            self::EVENT_RELATIONSHIP_TYPES_LOCATED_IN,
            self::EVENT_RELATIONSHIP_TYPES_READ_QUARTER,
            self::EVENT_RELATIONSHIP_TYPES_READ_HALF,
            self::EVENT_RELATIONSHIP_TYPES_READ_ALL,
            self::EVENT_RELATIONSHIP_TYPES_SUBSCRIBED_TO,
            self::EVENT_RELATIONSHIP_TYPES_SUBSCRIBED_FROM,
            self::EVENT_RELATIONSHIP_TYPES_ADDED_TO,
            self::EVENT_RELATIONSHIP_TYPES_MADE_BY,
            self::EVENT_RELATIONSHIP_TYPES_PAUSED_ON,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEventObjectTypesAllowableValues()
    {
        return [
            self::EVENT_OBJECT_TYPES_USER,
            self::EVENT_OBJECT_TYPES_PRODUCT,
            self::EVENT_OBJECT_TYPES_IMAGE,
            self::EVENT_OBJECT_TYPES_COMMENT,
            self::EVENT_OBJECT_TYPES_ARTICLE,
            self::EVENT_OBJECT_TYPES_POST,
            self::EVENT_OBJECT_TYPES_VIDEO,
            self::EVENT_OBJECT_TYPES_CONTENT,
            self::EVENT_OBJECT_TYPES_TAG,
            self::EVENT_OBJECT_TYPES_CATEGORY,
            self::EVENT_OBJECT_TYPES_APP,
            self::EVENT_OBJECT_TYPES_BOOK,
            self::EVENT_OBJECT_TYPES_PERSON,
            self::EVENT_OBJECT_TYPES_SKILL,
            self::EVENT_OBJECT_TYPES_JOB,
            self::EVENT_OBJECT_TYPES_COMPANY,
            self::EVENT_OBJECT_TYPES_ACCOUNT,
            self::EVENT_OBJECT_TYPES_CARD,
            self::EVENT_OBJECT_TYPES_COUNTRY,
            self::EVENT_OBJECT_TYPES_STATE,
            self::EVENT_OBJECT_TYPES_FILM,
            self::EVENT_OBJECT_TYPES_CART,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['object'] = isset($data['object']) ? $data['object'] : null;
        $this->container['follow_relationship_types'] = isset($data['follow_relationship_types']) ? $data['follow_relationship_types'] : null;
        $this->container['follow_object_types'] = isset($data['follow_object_types']) ? $data['follow_object_types'] : null;
        $this->container['event_relationship_types'] = isset($data['event_relationship_types']) ? $data['event_relationship_types'] : null;
        $this->container['event_object_types'] = isset($data['event_object_types']) ? $data['event_object_types'] : null;
        $this->container['exclude_self_object'] = isset($data['exclude_self_object']) ? $data['exclude_self_object'] : null;
        $this->container['limit'] = isset($data['limit']) ? $data['limit'] : null;
        $this->container['before'] = isset($data['before']) ? $data['before'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['object'] === null) {
            $invalidProperties[] = "'object' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets object
     *
     * @return \Pipeless\Model\ObjectLookup
     */
    public function getObject()
    {
        return $this->container['object'];
    }

    /**
     * Sets object
     *
     * @param \Pipeless\Model\ObjectLookup $object object
     *
     * @return $this
     */
    public function setObject($object)
    {
        $this->container['object'] = $object;

        return $this;
    }

    /**
     * Gets follow_relationship_types
     *
     * @return string[]|null
     */
    public function getFollowRelationshipTypes()
    {
        return $this->container['follow_relationship_types'];
    }

    /**
     * Sets follow_relationship_types
     *
     * @param string[]|null $follow_relationship_types An array of the relationship types that represent the concept of \"following\" in your data. If none provided, by default the relationship type \"followed\" will be used.
     *
     * @return $this
     */
    public function setFollowRelationshipTypes($follow_relationship_types)
    {
        $allowedValues = $this->getFollowRelationshipTypesAllowableValues();
        if (!is_null($follow_relationship_types) && array_diff($follow_relationship_types, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'follow_relationship_types', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['follow_relationship_types'] = $follow_relationship_types;

        return $this;
    }

    /**
     * Gets follow_object_types
     *
     * @return string[]|null
     */
    public function getFollowObjectTypes()
    {
        return $this->container['follow_object_types'];
    }

    /**
     * Sets follow_object_types
     *
     * @param string[]|null $follow_object_types An array of the object types that can be followed in your dataset and that you want to be used for this activity feed. If none provided, by default any object type that is found based on the allowed follow_relationship_types will be used.
     *
     * @return $this
     */
    public function setFollowObjectTypes($follow_object_types)
    {
        $allowedValues = $this->getFollowObjectTypesAllowableValues();
        if (!is_null($follow_object_types) && array_diff($follow_object_types, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'follow_object_types', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['follow_object_types'] = $follow_object_types;

        return $this;
    }

    /**
     * Gets event_relationship_types
     *
     * @return string[]|null
     */
    public function getEventRelationshipTypes()
    {
        return $this->container['event_relationship_types'];
    }

    /**
     * Sets event_relationship_types
     *
     * @param string[]|null $event_relationship_types An array of the relationship types of the actions you want to show up in the activity feed. If none provided, by default any relationships that are present in the resulting feed items will be returned.
     *
     * @return $this
     */
    public function setEventRelationshipTypes($event_relationship_types)
    {
        $allowedValues = $this->getEventRelationshipTypesAllowableValues();
        if (!is_null($event_relationship_types) && array_diff($event_relationship_types, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'event_relationship_types', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['event_relationship_types'] = $event_relationship_types;

        return $this;
    }

    /**
     * Gets event_object_types
     *
     * @return string[]|null
     */
    public function getEventObjectTypes()
    {
        return $this->container['event_object_types'];
    }

    /**
     * Sets event_object_types
     *
     * @param string[]|null $event_object_types An array of the object types that can appear as content in the feed. If none provided, any object type that results from the other settings will be shown in the feed.
     *
     * @return $this
     */
    public function setEventObjectTypes($event_object_types)
    {
        $allowedValues = $this->getEventObjectTypesAllowableValues();
        if (!is_null($event_object_types) && array_diff($event_object_types, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'event_object_types', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['event_object_types'] = $event_object_types;

        return $this;
    }

    /**
     * Gets exclude_self_object
     *
     * @return bool|null
     */
    public function getExcludeSelfObject()
    {
        return $this->container['exclude_self_object'];
    }

    /**
     * Sets exclude_self_object
     *
     * @param bool|null $exclude_self_object If this value is false (the default), then the user you are fetching the feed for can appear in the feed results as an acting user (if the user follows themself) or action user (object that is being acted on by users the user follows). If set to true, the user the feed is being fetched for will not appear in the results.
     *
     * @return $this
     */
    public function setExcludeSelfObject($exclude_self_object)
    {
        $this->container['exclude_self_object'] = $exclude_self_object;

        return $this;
    }

    /**
     * Gets limit
     *
     * @return int|null
     */
    public function getLimit()
    {
        return $this->container['limit'];
    }

    /**
     * Sets limit
     *
     * @param int|null $limit limit
     *
     * @return $this
     */
    public function setLimit($limit)
    {
        $this->container['limit'] = $limit;

        return $this;
    }

    /**
     * Gets before
     *
     * @return string|null
     */
    public function getBefore()
    {
        return $this->container['before'];
    }

    /**
     * Sets before
     *
     * @param string|null $before before
     *
     * @return $this
     */
    public function setBefore($before)
    {
        $this->container['before'] = $before;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


